version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: pllm-postgres
    environment:
      POSTGRES_USER: pllm
      POSTGRES_PASSWORD: pllm
      POSTGRES_DB: pllm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pllm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pllm"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pllm-redis
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - pllm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pllm-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - pllm-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: pllm-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - pllm-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: pllm-cadvisor
    ports:
      - "8090:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - pllm-network
    restart: unless-stopped

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pllm-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./config/grafana-dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - pllm-network
    depends_on:
      - prometheus

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: pllm-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Collector HTTP endpoint
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    networks:
      - pllm-network

  # Main pllm service
  pllm:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pllm-gateway
    ports:
      - "8080:8080" # Main API
      - "8081:8081" # Admin API
      - "9090:9090" # Metrics
    environment:
      - DATABASE_URL=postgres://pllm:pllm@postgres:5432/pllm?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-this}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-changeme123!}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@pllm.io}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # OpenAI Configuration - Add your API key here
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-your-openai-api-key}
      # Optional: Additional OpenAI keys for load balancing
      - OPENAI_API_KEY_1=${OPENAI_API_KEY:-sk-your-openai-api-key}
      - OPENAI_API_KEY_2=${OPENAI_API_KEY_2:-}
      - OPENAI_API_KEY_3=${OPENAI_API_KEY_3:-}
      # Optional: Other providers
      - ANTHROPIC_API_KEY_1=${ANTHROPIC_API_KEY:-}
      - AZURE_API_KEY_EAST=${AZURE_API_KEY_EAST:-}
      - GROQ_API_KEY_1=${GROQ_API_KEY:-}
      - MISTRAL_API_KEY_1=${MISTRAL_API_KEY:-}
    volumes:
      - ./config.docker.yaml:/app/config.yaml:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pllm-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  pllm-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
