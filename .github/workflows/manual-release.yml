name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: patch
      prerelease_type:
        description: 'Pre-release type (only used when version_type is prerelease)'
        required: false
        type: choice
        options:
          - rc
          - alpha
          - beta
        default: rc
      custom_version:
        description: 'Custom version (e.g., v1.2.3 or v1.2.3-rc1). Overrides version_type if provided.'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  pages: write
  id-token: write

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_without_v: ${{ steps.version.outputs.version_without_v }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get the latest tag that matches semver pattern
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"

          # If custom version is provided, use it
          if [ -n "$CUSTOM_VERSION" ]; then
            NEW_VERSION="$CUSTOM_VERSION"
            # Ensure it starts with 'v'
            if [[ ! "$NEW_VERSION" =~ ^v ]]; then
              NEW_VERSION="v$NEW_VERSION"
            fi
          else
            # Parse current version
            CURRENT_VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

            # Handle pre-release versions
            if [[ "$PATCH" =~ ^([0-9]+)-.* ]]; then
              PATCH="${BASH_REMATCH[1]}"
            fi

            # Calculate new version based on type
            case "$VERSION_TYPE" in
              patch)
                PATCH=$((PATCH + 1))
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              prerelease)
                # Find existing prerelease number or start at 1
                EXISTING_PRE=$(git tag -l --sort=-version:refname | grep -E "^v${MAJOR}\.${MINOR}\.${PATCH}-${PRERELEASE_TYPE}[0-9]+" | head -1)
                if [ -n "$EXISTING_PRE" ]; then
                  PRE_NUM=$(echo "$EXISTING_PRE" | sed -E "s/.*-${PRERELEASE_TYPE}([0-9]+).*/\1/")
                  PRE_NUM=$((PRE_NUM + 1))
                else
                  PRE_NUM=1
                fi
                NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}-${PRERELEASE_TYPE}${PRE_NUM}"
                ;;
            esac

            # Construct final version (unless it was a prerelease)
            if [ "$VERSION_TYPE" != "prerelease" ]; then
              NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            fi
          fi

          # Version without 'v' prefix
          VERSION_WITHOUT_V=${NEW_VERSION#v}

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_without_v=$VERSION_WITHOUT_V" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Validate version doesn't exist
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          if git tag -l | grep -q "^${NEW_VERSION}$"; then
            echo "Error: Version $NEW_VERSION already exists!"
            exit 1
          fi

  build-and-release:
    needs: calculate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            web/package-lock.json
            docs/package-lock.json

      - name: Install frontend dependencies
        run: cd web && npm ci

      - name: Install docs dependencies
        run: cd docs && npm ci

      - name: Build frontend
        run: cd web && npm run build

      - name: Copy frontend build for Go embed
        run: |
          mkdir -p internal/ui/dist
          cp -r web/dist/* internal/ui/dist/

      - name: Build docs
        run: cd docs && npm run build

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Generate Swagger docs
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g cmd/server/main.go -o internal/handlers/swagger

      - name: Run tests
        run: make test-coverage

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
          git push origin "$NEW_VERSION"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ needs.calculate-version.outputs.new_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"

          # Determine if this is a prerelease
          PRERELEASE_FLAG=""
          if [[ "$NEW_VERSION" =~ -[a-zA-Z] ]] || [ "$VERSION_TYPE" = "prerelease" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          # Generate release notes
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | grep -v "$NEW_VERSION" | head -1)
          if [ -n "$PREVIOUS_TAG" ]; then
            RELEASE_NOTES=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..$NEW_VERSION" | head -20)
          else
            RELEASE_NOTES="Initial release"
          fi

          cat > release_notes.md << 'EOF'
          ## Changes
          
          $RELEASE_NOTES
          
          ## Docker Images
          - `amerfu/pllm:$NEW_VERSION`
          - `amerfu/pllm:${NEW_VERSION%.*}` (minor version)
          - `amerfu/pllm:${NEW_VERSION%%.*}` (major version)
          
          ## Helm Chart
          ```bash
          helm install pllm oci://registry-1.docker.io/amerfu/pllm --version ${{ needs.calculate-version.outputs.version_without_v }}
          ```
          EOF
          
          gh release create "$NEW_VERSION" $PRERELEASE_FLAG \
            --title "Release $NEW_VERSION" \
            --notes-file release_notes.md

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: amerfu/pllm
          tags: |
            type=raw,value=${{ needs.calculate-version.outputs.version_without_v }}
            type=semver,pattern={{version}},value=${{ needs.calculate-version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.calculate-version.outputs.new_version }}
            type=semver,pattern={{major}},value=${{ needs.calculate-version.outputs.new_version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-helm:
    needs: [calculate-version, build-and-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add dexidp https://charts.dexidp.io
          helm repo update

      - name: Update chart version
        run: |
          cd deploy/helm/pllm
          VERSION="${{ needs.calculate-version.outputs.version_without_v }}"
          sed -i "s/^version:.*/version: ${VERSION}/" Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" Chart.yaml
          helm dependency update

      - name: Package Helm chart
        run: |
          cd deploy/helm
          helm package pllm

      - name: Login to Docker Hub for OCI
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push chart to Docker Hub (OCI)
        run: |
          cd deploy/helm
          VERSION="${{ needs.calculate-version.outputs.version_without_v }}"
          helm push pllm-${VERSION}.tgz oci://registry-1.docker.io/amerfu

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          charts_dir: deploy/helm
          config: cr.yaml

  notify-success:
    needs: [calculate-version, build-and-release, release-helm]
    runs-on: ubuntu-latest
    steps:
      - name: Release Summary
        run: |
          echo "🎉 New PLLM release ${{ needs.calculate-version.outputs.new_version }} is available!"
          echo "📦 Docker Image: amerfu/pllm:${{ needs.calculate-version.outputs.new_version }}"
          echo "📊 Helm Chart: helm install pllm oci://registry-1.docker.io/amerfu/pllm --version ${{ needs.calculate-version.outputs.version_without_v }}"
          echo "📋 Release Notes: https://github.com/amerfu/pllm/releases/tag/${{ needs.calculate-version.outputs.new_version }}"
